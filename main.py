import requests
import json
import logging
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Update, WebAppInfo
from telegram.ext import Application, Updater, CommandHandler, ContextTypes, MessageHandler, filters

# –í–∞—à API key –æ—Ç –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç (https://developer.tech.yandex.ru/services - –≤–∞–º –Ω—É–∂–µ–Ω JavaScript API –∏ HTTP –ì–µ–æ–∫–æ–¥–µ—Ä)
# !–í–ê–ñ–ù–û —ç—Ç–æ—Ç –∂–µ –∫–ª—é—á –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ —Ñ–∞–π–ª–µ webappsaymyaddress.html –≤ <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU&amp;apikey= –∏ –≤ function getAddress()
YANDEX_MAPS_API_KEY = "YANDEX_MAPS_API_KEY"
# –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ webappsaymyaddress.html –Ω–∞ —Å–≤–æ–µ–º —Å–µ—Ä–≤–µ—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä website.com/webappsaymyaddress.html)
MINI_APP_HTML_URL = "YOUR_URL_TO/webappsaymyaddress.html"
# –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–±–æ—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ https://t.me/botfather)
MY_TELEGRAM_BOT_TOKEN = "BOT_TOKEN"

# —ç—Ç–æ –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
def get_address_from_coords(coords):

    PARAMS = {
        "apikey": YANDEX_MAPS_API_KEY,
        "format": "json",
        "lang": "ru_RU",
        "kind": "house",
        "geocode": coords
    }

    try:
        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç, —á—Ç–æ –æ–Ω–∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≤–∏–¥–µ –î–û–õ–ì–û–¢–ê, –®–ò–†–û–¢–ê
        r = requests.get(url="https://geocode-maps.yandex.ru/1.x/", params=PARAMS)
        json_data = r.json()
        address_str = json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"][
            "GeocoderMetaData"]["AddressDetails"]["Country"]["AddressLine"]

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Ç–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –®–ò–†–û–¢–ê, –î–û–õ–ì–û–¢–ê
        coords = coords.replace(" ", "")
        latitude = coords.split(",")[1]
        longitude = coords.split(",")[0]
        coords_shir_dolg = latitude + ", " + longitude

        return "<code>"+address_str + "</code>\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞):\n<code>" + coords_shir_dolg+"</code>"

    # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–æ—Ä–≤–∞–ª–æ—Å—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
    except Exception as e:
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑
            coords_shir_dolg = coords
            coords = coords.replace(" ", "")
            latitude = coords.split(",")[0]
            longitude = coords.split(",")[1]
            coords = longitude + ", " + latitude
            PARAMS = {
                "apikey": YANDEX_MAPS_API_KEY,
                "format": "json",
                "lang": "ru_RU",
                "kind": "house",
                "geocode": coords
            }
            r = requests.get(url="https://geocode-maps.yandex.ru/1.x/", params=PARAMS)
            json_data = r.json()
            address_str = \
            json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"][
                "GeocoderMetaData"]["AddressDetails"]["Country"]["AddressLine"]
            return "<code>" + address_str + "</code>\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞):\n<code>" + coords_shir_dolg + "</code>"

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ, —Ç–æ –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:"


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–≤—ã–π –Ω–∞–∂–∞–ª –≤ –±–æ—Ç–µ START
async def start(update, context):
    keyboard = get_mini_app_keyboard()

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard = True)

    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏ <b>–õ–û–ö–ê–¶–ò–Æ</b> / <b>–ö–û–û–†–î–ò–ù–ê–¢–´</b> –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç–µ:",
        parse_mode = "HTML",
        reply_markup=reply_markup
    )

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ MiniApp
async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    # –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ html —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ
    data = json.loads(update.effective_message.web_app_data.data)

    keyboard = get_mini_app_keyboard()

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –≤–æ–≤—â—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç–µ
    await update.message.reply_text(
        'üìç –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n<code>' + data['address'] + "</code>\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞):\n<code>{}, {}</code>".format(data['latitude'],data['longitude']) + '\n\nYandex Maps:\nhttps://yandex.ru/maps/?pt={},{}&z=17&l=map'.format(
            data['longitude'], data['latitude']) + '\n\nGoogle Maps:\nhttp://www.google.com/maps/place/{},{}'.format(data['latitude'],data['longitude']),
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=reply_markup)

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –≤ –±–æ—Ç–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç. –ú—ã –æ–∂–∏–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–æ –µ—Å–ª–∏ –ø—Ä–∏–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –≤–µ–¥—å –º—ã –æ–ø–∏—Å–∞–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ.
async def text(update, context):

    keyboard = get_mini_app_keyboard()

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coords = update.message.text
    latitide = coords.replace(' ', '').split(',')[0]
    longitude = coords.replace(' ', '').split(',')[1]
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    address_str = get_address_from_coords(coords)
    # –≤–æ–≤—â—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç–µ
    await update.message.reply_text(
        'üìç –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n' + address_str + '\n\nYandex Maps:\nhttps://yandex.ru/maps/?pt={},{}&z=17&l=map'.format(
            longitude, latitide) + '\n\nGoogle Maps:\nhttp://www.google.com/maps/place/{},{}'.format(latitide,
                                                                                                     longitude),
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=reply_markup)

def get_mini_app_keyboard():
    return [
        [
            KeyboardButton("üìç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                           web_app=WebAppInfo(url=MINI_APP_HTML_URL))
        ]
    ]

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –ª–æ–∫–∞—Ü–∏—é.
async def location(update, context):
    keyboard = [
        [
            KeyboardButton("üìç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
                           web_app=WebAppInfo(url="https://stepogram.shop/media/html/webappsaymyaddress.html"))
        ]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—å–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–æ–∫–∞—Ü–∏–∏)
    message = update.message
    # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É
    current_position = (message.location.longitude, message.location.latitude)
    latitide = message.location.latitude
    longitude = message.location.longitude
    # —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ –î–û–õ–ì–û–¢–ê,–®–ò–†–û–¢–ê
    coords = f"{current_position[0]}, {current_position[1]}"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    address_str = get_address_from_coords(coords)
    # –≤–æ–≤—â—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–æ—Ç–µ
    await update.message.reply_text(
        'üìç –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n' + address_str + '\n\nYandex Maps:\nhttps://yandex.ru/maps/?pt={},{}&z=17&l=map'.format(
            longitude, latitide) + '\n\nGoogle Maps:\nhttp://www.google.com/maps/place/{},{}'.format(latitide,longitude),
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=reply_markup)


# –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞—à –±–æ—Ç
def main():
    # —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Ç–æ–∫–µ–Ω
    application = Application.builder().token(MY_TELEGRAM_BOT_TOKEN).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é def start
    application.add_handler(CommandHandler("start", start))
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é def text
    application.add_handler(MessageHandler(filters.TEXT, text))
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é def location
    application.add_handler(MessageHandler(filters.LOCATION, location))
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ mini app
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é def main
    main()